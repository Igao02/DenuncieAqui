@page "/Account/Login"
@using DenuncieAqui.Infrastructure.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="full-page-background"></div>
<div class="content">
    <div class="card text-center d-flex flex-row">
        <div class="row g-0 flex-grow-1">
            <div class="col-md-4 d-flex ">
                <img src="/Images/PossivelOfc (2).jpeg" class="img-fluid rounded-start" />
            </div>
            <div class="col-md-8 d-flex flex-column justify-content-center">
                <section>
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        <h2 class="fw-bold pt-3">Entre com a sua conta.</h2>
                        <ValidationSummary class="text-danger" role="alert" />

                        <div class="row d-flex justify-content-center">
                            <div class="form-floating mb-4 col-md-6">
                                <InputText @bind-Value="Input.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="NomeExemplo@157" ></InputText>
                                <label for="username" class="form-label">Apelido</label>
                                <ValidationMessage For="() => Input.UserName" class="text-danger" />
                            </div>
                        </div>

                        <div class="row d-flex justify-content-center">
                            <div class="form-floating mb-3 col-md-6">
                                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                                <label for="Senha" class="form-label">Password</label>
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
                            </div>
                        </div>

                        <div class="row d-flex justify-content-center">
                            <div class="checkbox mb-3 col-md-6">
                                <label class="form-label">
                                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                    Lembrar Credenciais
                                </label>
                            </div>
                        </div>

                        <div>
                            <p>
                                <a class="btn btn-danger" href="Account/ForgotPassword">Esqueceu sua senha?</a>
                            </p>
                           @*  <p>
                                <a class="btn btn-success" href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Registrar um novo usuário</a>
                            </p> *@
                          @*   <p>
                                <a class="btn btn-dark" href="Account/ResendEmailConfirmation">Reenviar confirmação de e-mail</a>
                            </p> *@
                        </div>

                        <div class="row d-flex justify-content-center">
                            <button type="submit" class="btn btn-lg btn-primary col-md-6 mb-3">Entrar</button>
                        </div>

                    </EditForm>
                    <div class="">
                        <footer>
                            <p>&copy; 2024 DenúncieAqui. Todos os direitos.</p>
                        </footer>
                    </div>
                </section>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
