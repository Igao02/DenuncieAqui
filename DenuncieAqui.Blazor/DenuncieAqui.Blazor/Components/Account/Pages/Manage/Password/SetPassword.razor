@page "/Account/Manage/SetPassword"
@using DenuncieAqui.Infrastructure.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Definir senha</PageTitle>

<h3>Defina sua senha</h3>
<StatusMessage Message="@message" />
<p class="text-info">
    Você ainda não possui um nome de usuário/senha local para este site. Adicione uma conta local para que você possa acessar sem um login externo.
</p>
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="definir-senha" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" placeholder="Digite sua nova senha." />
                <label for="new-password" class="form-label">Nova senha</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Confirme sua nova senha." />
                <label for="confirm-password" class="form-label">Confirmar senha</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Definir senha</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }


    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            var errosEmPortugues = addPasswordResult.Errors.Select(TraduzirErro).ToArray();
            message = $"Erro: {string.Join(", ", errosEmPortugues)}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Sua senha foi definida.", HttpContext);
    }

    private string TraduzirErro(IdentityError erro)
    {
        return erro.Code switch
        {
            "PasswordTooShort" => "A senha é muito curta.",
            "PasswordRequiresNonAlphanumeric" => "A senha deve conter pelo menos um caractere não alfanumérico.",
            "PasswordRequiresDigit" => "A senha deve conter pelo menos um dígito.",
            "PasswordRequiresLower" => "A senha deve conter pelo menos uma letra minúscula.",
            "PasswordRequiresUpper" => "A senha deve conter pelo menos uma letra maiúscula.",
            "Incorrect password." => "Senha original incorreta",
            _ => erro.Description // Para outros erros não mapeados
        };
    }


    private sealed class InputModel
    {
        [Required(ErrorMessage = "O campo {0} é obrigatório.")]
        [StringLength(100, ErrorMessage = "A {0} deve ter no mínimo {2} e no máximo {1} caracteres.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Nova senha")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirmar nova senha")]
        [Compare("NewPassword", ErrorMessage = "A nova senha e a confirmação não coincidem.")]
        public string? ConfirmPassword { get; set; }
    }
}
