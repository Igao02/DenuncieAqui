@page "/create"
@using DenuncieAqui.Application.UseCases.ImageUseCase
@using DenuncieAqui.Application.UseCases.ReportUseCase
@using DenuncieAqui.Domain.Entities
@using Microsoft.AspNetCore.Mvc

@rendermode InteractiveServer
@inject ReportUsecase _reportUseCase
@inject ImageUseCase _imageUseCase
@inject NavigationManager Navi

<PageTitle>Create</PageTitle>
<div class="full-page-background"></div>
<div id="post-container">
    <div id="user-profile">
        <img src="/Images/Slogan 5.jpeg" alt="User Avatar" id="user-avatar" class="mb-2">
        <AuthorizeView>
            <Authorized>
                <NavLink class="nav-link" href="Account/Manage">
                    <div id="user-name">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </div>
                </NavLink>
            </Authorized>
        </AuthorizeView>
    </div>
    <EditForm Model="@Model" OnValidSubmit="CreateReport" OnInvalidSubmit="Cancel">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="mb-3">
            <label class="form-label">Nome da Publicação</label>
            <InputText @bind-Value="Model.ReportName" class="form-control" placeholder="Digite o nome da Publicação"></InputText>
        </div>

        <div class="mb-3">
            <label class="form-label">Tipo de Publicação</label>
            <InputSelect @bind-Value="Model.TypeReport" class="form-select">
                <option value="" disabled>Selecione o tipo de publicação</option>
                <option value="Racismo">Racismo</option>
                <option value="Discriminação feminina">Discriminação feminina</option>
                <option value="Discriminação de sexualidade">Discriminação de sexualidade</option>
            </InputSelect>
        </div>

        <div id="post-textarea">
            <label class="form-label">Descrição da publicação</label>
            <InputTextArea @bind-Value="Model.ReportDescription" class="form-control" placeholder="Digite a descrição da publicação"></InputTextArea>
        </div>

        <div id="upload-image" class="mb-3">
            <label class="form-label">Upload de Imagens</label>
            <InputFile multiple OnChange="HandleSelectedFiles" />
        </div>

        <div id="buttons">
            <button type="submit" class="btn btn-primary">Publicar</button>
            <button type="button" class="btn btn-danger" @onclick="Cancel">Cancelar</button>
        </div>
    </EditForm>
</div>

@code {
    public Report Model { get; set; } = new Report();
    public Image ModelImage { get; set; } = new Image();

    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();

    private void HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles().ToList();
    }

    [HttpPost]
    private async Task CreateReport()
    {
        // Cria o Report
        await _reportUseCase.CreateReportAsync(Model);

        // Faz o upload das imagens
        await UploadImages();

        // Redireciona após a criação e upload
        Navi.NavigateTo("/");
    }

    private async Task UploadImages()
    {
        var formFiles = new List<IFormFile>();

        foreach (var file in selectedFiles)
        {
            // Abre um stream para o arquivo
            using var stream = file.OpenReadStream();

            // Cria um MemoryStream para armazenar o conteúdo do arquivo
            using var memoryStream = new MemoryStream();

            // Copia o conteúdo do arquivo para o MemoryStream
            await stream.CopyToAsync(memoryStream);

            // Obtém o conteúdo do arquivo como um array de bytes
            ModelImage.ConteudoArquivo = memoryStream.ToArray();

            // Cria um FormFile a partir do stream, com as propriedades necessárias
            var formFile = new FormFile(new MemoryStream(ModelImage.ConteudoArquivo), 0, ModelImage.ConteudoArquivo.Length, file.Name, file.Name)
                {
                    Headers = new HeaderDictionary(),
                    ContentType = file.ContentType
                };

            // Adiciona o FormFile à lista de arquivos
            formFiles.Add(formFile);

            // Cria a URL da imagem (se necessário)
            //var imageUrl = $"/ReportImages/Uploads/{file.Name}";

        }


        if (formFiles.Any())
        {
            // Chama o método UploadImagesAsync passando os arquivos e o ID do relatório
            await _imageUseCase.UploadImagesAsync(formFiles, Model.Id);
        }
    }


    private void Cancel()
    {
        Navi.NavigateTo("/");
    }
}




