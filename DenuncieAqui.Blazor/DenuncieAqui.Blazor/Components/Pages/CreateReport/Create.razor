@page "/create"
@using DenuncieAqui.Application.UseCases.ImageUseCase
@using DenuncieAqui.Application.UseCases.ReportUseCase
@using DenuncieAqui.Domain.Entities
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Components.Authorization

@rendermode InteractiveServer
@inject ReportUsecase _reportUseCase
@inject ImageUseCase _imageUseCase
@inject NavigationManager Navi
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create</PageTitle>
<div class="full-page-background"></div>
<div id="post-container">
    <div id="user-profile">
        <img src="/Images/incognito.svg" alt="User Avatar" id="user-avatar" class="mb-2">
        <AuthorizeView>
            <Authorized>
                <NavLink class="nav-link" href="Account/Manage">
                    <div id="user-name">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </div>
                </NavLink>
            </Authorized>
        </AuthorizeView>
    </div>
    <EditForm Model="@Model" OnValidSubmit="CreateReport">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="mb-3">
            <label class="form-label">Nome da Publicação</label>
            <InputText @bind-Value="Model.ReportName" class="form-control" placeholder="Digite o nome da Publicação">
            </InputText>
        </div>

        <div class="mb-3">
            <label class="form-label">Tipo de Publicação</label>
            <InputSelect @bind-Value="Model.TypeReport" class="form-select" @onchange="OnTypeReportChanged">
                <option value="" disabled>Selecione o tipo de publicação</option>
                <AuthorizeView Context="authContext" Roles="PARTNER">
                    <option value="Evento">Evento</option>
                </AuthorizeView>
                <option value="Racismo">Discriminação racial</option>
                <option value="Discriminação feminina">Discriminação feminina</option>
                <option value="Discriminação de sexualidade">Discriminação de sexualidade</option>
            </InputSelect>
        </div>

        <div id="post-textarea">
            <label class="form-label">Descrição da publicação</label>
            <InputTextArea @bind-Value="Model.ReportDescription" class="form-control"
                           placeholder="Digite a descrição da publicação"></InputTextArea>
        </div>

        <div id="upload-image" class="mb-3">
            <label class="form-label">Upload de Imagens</label>
            <InputFile multiple OnChange="HandleSelectedFiles" />
        </div>

        <div class="image-preview-container">
            @foreach (var imageUrl in imagePreviewUrls)
            {
                <img src="@imageUrl" alt="Image Preview" class="img-thumbnail" style="max-width: 200px; margin: 5px;" />
            }
        </div>

        <div id="buttons">
            <button type="submit" class="btn btn-primary">Publicar</button>
            <button type="button" class="btn btn-danger" @onclick="Cancel">Cancelar</button>
        </div>
    </EditForm>

    @if (uploadInProgress)
    {
        <div class="alert alert-info" role="alert">
            Upload de imagens em progresso...
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success" role="alert">
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
</div>

@code {
    public Report Model { get; set; } = new Report();
    public Image ModelImage { get; set; } = new Image();
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private List<string> imagePreviewUrls = new List<string>();
    private bool uploadInProgress = false;
    private string successMessage = "";
    private string errorMessage = "";

    [HttpPost]
    private async Task CreateReport()
    {
        uploadInProgress = true;
        successMessage = string.Empty;
        errorMessage = string.Empty;

        try
        {
            await _reportUseCase.CreateReportAsync(Model);
            await UploadImages();
            successMessage = "Publicação criada com sucesso!";
            imagePreviewUrls.Clear();
            Console.WriteLine("Username: ", Model.UserName);
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao criar publicação: {ex.InnerException?.Message ?? ex.Message}";
            Navi.NavigateTo("/create");
        }
        finally
        {
            uploadInProgress = false;
            selectedFiles.Clear();
            StateHasChanged();
        }

        Navi.NavigateTo("/");
    }

    private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles().ToList();
        imagePreviewUrls.Clear();

        foreach (var file in selectedFiles)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            var imageUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
            imagePreviewUrls.Add(imageUrl);
        }

        StateHasChanged();
    }


    private async Task UploadImages()
    {
        var formFiles = new List<IFormFile>();

        foreach (var file in selectedFiles)
        {
            using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            ModelImage.ConteudoArquivo = memoryStream.ToArray();

            var formFile = new FormFile(new MemoryStream(ModelImage.ConteudoArquivo), 0, ModelImage.ConteudoArquivo.Length,
            file.Name, file.Name)
                {
                    Headers = new HeaderDictionary(),
                    ContentType = file.ContentType
                };

            formFiles.Add(formFile);
        }

        if (formFiles.Any())
        {
            await _imageUseCase.UploadImagesAsync(formFiles, Model.Id);
        }
    }

    private void OnTypeReportChanged(ChangeEventArgs e)
    {
        Model.TypeReport = e.Value?.ToString();
        Model.IsEvent = Model.TypeReport == "Evento";
    }

    private void Cancel()
    {
        Navi.NavigateTo("/");
        imagePreviewUrls.Clear();
        selectedFiles.Clear();
    }
}
