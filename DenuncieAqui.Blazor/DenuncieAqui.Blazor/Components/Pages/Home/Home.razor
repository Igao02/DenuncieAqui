@page "/"
@using DenuncieAqui.Application.UseCases.ReportUseCase
@using DenuncieAqui.Application.UseCases.ImageUseCase
@using DenuncieAqui.Application.UseCases.CommentUseCase
@using DenuncieAqui.Application.UseCases.LikeUseCase
@using DenuncieAqui.Application.ViewModels.Report
@using DenuncieAqui.Blazor.Client.Components.Notifications.Toast
@using DenuncieAqui.Domain.Entities
@using DenuncieAqui.Domain.Repositories
@using DenuncieAqui.Infrastructure.Data
@using Microsoft.AspNetCore.Identity

@rendermode InteractiveServer
@inject ReportUsecase _reportUseCase
@inject ImageUseCase _imageUseCase
@inject CommentUseCase _commentUseCase
@inject LikeUseCase _likeUseCase
@inject IJSRuntime JSRuntime
@inject UserManager<ApplicationUser> UserManager


<PageTitle>Home</PageTitle>
<div class="full-page-background"></div>
<div class="mb-3" style="max-width: 300px; float: inherit">
    <label for="typeFilter" class="form-label">Filtrar por Tipo de Publicação</label>
    <select id="typeFilter" class="form-select" @onchange="OnTypeFilterChanged">
        <option value="">Todos os Tipos</option>
        <option value="Evento">Eventos</option>
        <option value="Racismo">Discriminação racial</option>
        <option value="Discriminação feminina">Discriminação feminina</option>
        <option value="Discriminação de sexualidade">Discriminação de sexualidade</option>
    </select>
</div>

@if (filteredReports != null && filteredReports.Any())
{
    @foreach (var report in filteredReports)
    {
        <div id="post-container">
            <div class="post-item">
                <div id="post-header">
                    <img src="/Images/incognito.svg" alt="Profile Picture">
                    <div id="user-name">
                        @report.UserName
                        @if (userPartnerStatus.ContainsKey(report.UserName) && userPartnerStatus[report.UserName])
                        {
                            <img src="/Images/patch-check.svg" />
                        }
                    </div>


                    <div class="dropdown">
                        <button class="btn btn-link" @onclick="() => ToggleDropdown(report.Id)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                                <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z" />
                            </svg>
                        </button>

                        @if (dropdownState.ContainsKey(report.Id) && dropdownState[report.Id])
                        {
                            <div class="dropdown-menu show">
                                <button class="dropdown-item" @onclick="() => ConfirmDelete(report.Id)">Deletar publicação</button>
                                <button class="dropdown-item" @onclick="() => EditReport(report)">Editar publicação</button>
                            </div>
                        }
                    </div>

                    <div id="post-date">
                        @report.ReportsDate.ToString("dd/MM/yyyy HH:mm")
                    </div>
                </div>

                @if (report.IsEditing && selectedReport != null)
                {
                    <EditForm Model="selectedReport" OnValidSubmit="UpdateReport">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Nome da Publicação:</label>
                            <InputText @bind-Value="selectedReport.ReportName" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Tipo de Publicação</label>
                            <InputSelect @bind-Value="selectedReport.TypeReport" class="form-select">
                                <option value="" disabled>Selecione o tipo de publicação</option>
                                <option value="Racismo">Discriminação racial</option>
                                <option value="Discriminação feminina">Discriminação feminina</option>
                                <option value="Discriminação de sexualidade">Discriminação de sexualidade</option>
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descrição da Publicação:</label>
                            <InputTextArea @bind-Value="selectedReport.ReportDescription" class="form-control" />
                        </div>
                        <button type="submit" class="btn btn-primary">Salvar Alterações</button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancelar</button>
                    </EditForm>
                }
                else
                {
                    <div id="post-details">
                        <div id="post-name">
                            <label class="form-label">Nome da publicação:</label>
                            <p>@report.ReportName</p>
                        </div>
                        <div id="type-report">
                            <label class="form-label">Tipo da publicação:</label>
                            <p>@report.TypeReport</p>
                        </div>
                        <div id="post-description">
                            <label class="col-form-label">Descrição da publicação:</label>
                            <p>@report.ReportDescription</p>
                        </div>
                    </div>

                    @if (report.Images != null && report.Images.Any())
                    {
                        <div id="post-images">
                            @foreach (var image in report.Images)
                            {
                                <img src="@image.ImageUrl" alt="Imagem da publicação" class="post-image">
                            }
                        </div>
                    }
                    else
                    {
                        <p>Nenhuma imagem disponível para esta publicação.</p>
                    }
                }

                <EditForm Model="@Model" OnValidSubmit="() => SubmitComment(report.Id)" FormName=@($"commentForm-{report.Id}")>
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Comentários: </label>
                        <InputTextArea @bind-Value="Model.CommentContent" class="form-control" placeholder="Escreva um comentário..."></InputTextArea>
                        <ValidationMessage For="@(() => Model.CommentContent)" />
                    </div>

                    <div id="commentActions">
                        <button id="commentButton" type="submit" class="btn btn-primary">Enviar Comentário</button>
                    </div>
                </EditForm>

                <div id="like-section">
                    <button class="btn-image @GetLikeClass(report.Id)" @onclick="() => ToggleLike(report.Id)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="40" height="35" fill="currentColor" class="bi bi-heart-fill" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314" />
                        </svg>
                    </button>
                </div>


                @if (report.Comments != null && report.Comments.Any())
                {
                    <div class="comment-section">
                        @foreach (var comment in report.Comments)
                        {
                            <div class="comment-item">
                                <p><strong>@comment.UserName:</strong> @comment.CommentContent</p>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
}
else
{
    <p>Não há publicações disponíveis.</p>
}

<Toast @ref="toast" />

@if (!string.IsNullOrEmpty(successMessage))
{
    toast.Show("Sucesso", successMessage, "Agora");
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    toast.Show("Erro", errorMessage, "Agora");
}

@code {
    private Toast toast;
    public IEnumerable<ReportViewModel> reports;
    public IEnumerable<ReportViewModel> filteredReports;
    public IEnumerable<Image> images;
    public IEnumerable<Comment> comments;
    public IEnumerable<Like> likes;

    public Comment Model { get; set; } = new Comment();
    private string errorMessage = "";
    private string successMessage = "";
    private Dictionary<Guid, bool> dropdownState = new Dictionary<Guid, bool>();
    private bool isEditing = false;
    private ReportViewModel selectedReport;
    private string selectedTypeFilter = "";
    private HashSet<Guid> likedReports = new HashSet<Guid>();
    private bool isUserPartner;
    private Dictionary<string, bool> userPartnerStatus = new Dictionary<string, bool>();

    protected override async Task OnInitializedAsync()
    {
        reports = await _reportUseCase.GetReportsAsync();
        images = await _imageUseCase.GetImagesAsync();
        comments = await _commentUseCase.GetCommentsAsync();
        likes = await _likeUseCase.GetLikesAsync();

        try
        {
            var userName = await _likeUseCase.GetCurrentUserNameAsync();
            var userLikes = await _likeUseCase.GetUserLikesAsync(userName);
            likedReports = new HashSet<Guid>(userLikes.Select(like => like.ReportId));
        }
        catch (UnauthorizedAccessException)
        {
            errorMessage = "Usuário não autenticado.";
            successMessage = string.Empty;
        }

        var userNames = reports.Select(report => report.UserName).Distinct();

        userPartnerStatus = await _reportUseCase.GetPartnersStatusAsync(userNames);

        await ApplyFilter();
    }

    private void ToggleDropdown(Guid reportId)
    {
        if (!dropdownState.ContainsKey(reportId))
        {
            dropdownState[reportId] = false;
        }

        dropdownState[reportId] = !dropdownState[reportId];
    }

    private async Task ConfirmDelete(Guid reportId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja deletar esta publicação?");

        if (confirmed)
        {
            await DeleteReport(reportId);
        }
    }

    private async Task DeleteReport(Guid reportId)
    {
        try
        {
            await _reportUseCase.DeleteReportAsync(reportId);

            successMessage = "Publicação deletada com sucesso!";
            reports = await _reportUseCase.GetReportsAsync();
        }
        catch (UnauthorizedAccessException)
        {
            errorMessage = "Usuário não autenticado.";
            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao deletar a publicação: {ex.Message}";
            successMessage = string.Empty;
        }

        ShowToastMessages();
    }

    private async Task SubmitComment(Guid reportId)
    {
        try
        {
            await _commentUseCase.CreateCommentAsync(reportId, Model.CommentContent);

            successMessage = "Comentário adicionado com sucesso!";
            errorMessage = string.Empty;
            Model.CommentContent = string.Empty;
        }
        catch (UnauthorizedAccessException)
        {
            errorMessage = "Usuário não autenticado.";
            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocorreu um erro: {ex.Message}. Inner Exception: {ex.InnerException?.Message}";
            successMessage = string.Empty;
        }

        ShowToastMessages();
    }

    private async Task ToggleLike(Guid reportId)
    {
        if (likedReports.Contains(reportId))
        {
            likedReports.Remove(reportId);
        }
        else
        {
            likedReports.Add(reportId);
        }

        await SubmitLike(reportId);
    }

    private async Task SubmitLike(Guid reportId)
    {
        try
        {
            await _likeUseCase.AddOrRemoveLikeAsync(reportId);

            successMessage = "Ação de curtida realizada com sucesso!";
            errorMessage = string.Empty;
        }
        catch (UnauthorizedAccessException)
        {
            errorMessage = "Usuário não autenticado.";
            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao curtir: {ex.Message}";
            successMessage = string.Empty;
        }

        ShowToastMessages();
    }

    private void EditReport(ReportViewModel report)
    {
        selectedReport = report;
        selectedReport.IsEditing = true;
    }

    private async Task UpdateReport()
    {
        try
        {
            await _reportUseCase.UpdateReportAsync(selectedReport);

            successMessage = "Publicação editada com sucesso!";
            errorMessage = string.Empty;
            isEditing = false;
            selectedReport = null;
            reports = await _reportUseCase.GetReportsAsync();
        }
        catch (UnauthorizedAccessException)
        {
            errorMessage = "Usuário não autenticado.";
            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao editar a publicação: {ex.Message}";
            successMessage = string.Empty;
        }

        ShowToastMessages();
    }

    private async Task ApplyFilter()
    {
        if (string.IsNullOrEmpty(selectedTypeFilter))
        {
            filteredReports = reports;
        }
        else
        {
            filteredReports = await _reportUseCase.GetReportsByTypeAsync(selectedTypeFilter);
        }
    }

    private async Task OnTypeFilterChanged(ChangeEventArgs e)
    {
        selectedTypeFilter = e.Value.ToString();
        await ApplyFilter();
    }

    private void CancelEdit()
    {
        isEditing = false;
        selectedReport = null;
    }

    private void ShowToastMessages()
    {
        if (!string.IsNullOrEmpty(successMessage))
        {
            toast.Show("Sucesso", successMessage, "Agora");
            successMessage = "";
        }

        if (!string.IsNullOrEmpty(errorMessage))
        {
            toast.Show("Erro", errorMessage, "Agora");
            errorMessage = "";
        }
    }

    private string GetLikeClass(Guid reportId)
    {
        return likedReports.Contains(reportId) ? "liked" : "unliked";
    }

}


