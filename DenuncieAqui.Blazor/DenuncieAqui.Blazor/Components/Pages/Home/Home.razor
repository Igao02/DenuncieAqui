@page "/"

@using DenuncieAqui.Application.UseCases.ReportUseCase
@using DenuncieAqui.Application.UseCases.ImageUseCase
@using DenuncieAqui.Application.UseCases.CommentUseCase
@using DenuncieAqui.Domain.Entities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Mvc
@inject ReportUsecase _reportUseCase
@inject ImageUseCase _imageUseCase
@inject CommentUseCase _commentUseCase
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home</PageTitle>
<div class="full-page-background"></div>
<div id="post-container">
    @if (reports != null && reports.Any())
    {
        @foreach (var report in reports)
        {
            <div class="post-item">
                <div id="post-header">
                    <img src="/Images/Slogan 5.jpeg" alt="Profile Picture">
                    <div id="user-name">@report.UserName</div>
                </div>
                <div id="post-name">
                    <p>@report.ReportName</p>
                </div>
                <div id="post-description">
                    <p>@report.ReportDescription</p>
                </div>

                @if (report.Images != null && report.Images.Any())
                {
                    @foreach (var image in report.Images)
                    {
                        <img src="@image.ImageUrl" alt="Post Image" class="post-image">
                    }
                }
                else
                {
                    <p>No images available for this report.</p>
                }

                <div id="actions">
                    <button>Like</button>
                </div>

                <EditForm Model="@commentModel" OnValidSubmit="() => SubmitComment(report.Id)" FormName="commentForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Comment</label>
                        <InputTextArea @bind-Value="commentModel.CommentContent" class="form-control" placeholder="Escreva um comentário..."></InputTextArea>
                        <ValidationMessage For="@(() => commentModel.CommentContent)" />
                    </div>

                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>

                @if (report.Comments != null && report.Comments.Any())
                {
                    <div class="comment-section">
                        @foreach (var comment in report.Comments)
                        {
                            <div class="comment-item">
                                <p><strong>@comment.UserName:</strong> @comment.CommentContent</p>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    }
    else
    {
        <p>No reports available.</p>
    }
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">
        @successMessage
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@code {
    public IEnumerable<Report> reports;
    public IEnumerable<Image> images;
    public IEnumerable<Comment> comments;

    public Comment commentModel { get; set; } = new Comment();
    private string errorMessage;
    private string successMessage;

    protected override async Task OnInitializedAsync()
    {
        reports = await _reportUseCase.GetReportsAsync();
        images = await _imageUseCase.GetImagesAsync();
        comments = await _commentUseCase.GetCommentsAsync();
    }

    private async Task SubmitComment(Guid reportId)
    {
        try
        {
            // Chama o método do CommentUseCase diretamente, sem passar o UserName
            await _commentUseCase.CreateCommentAsync(reportId, commentModel.CommentContent);

            reports = await _reportUseCase.GetReportsAsync(); // Recarregar os relatórios
            commentModel.CommentContent = string.Empty;
            successMessage = "Comentário adicionado com sucesso!";
            errorMessage = string.Empty;
        }
        catch (UnauthorizedAccessException)
        {
            errorMessage = "Usuário não autenticado.";
            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocorreu um erro: {ex.Message}. Inner Exception: {ex.InnerException?.Message}";
            successMessage = string.Empty;
        }
    }
}
