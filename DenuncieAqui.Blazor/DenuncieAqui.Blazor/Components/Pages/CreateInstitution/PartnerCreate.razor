@page "/register-partner"

@using DenuncieAqui.Application.UseCases.InstitutionUseCase
@using DenuncieAqui.Blazor.Components.Pages.CreateInstitution

@rendermode InteractiveServer

@inject InstitutionUseCase _institutionUseCase
@inject NavigationManager Navi
@inject HttpClient Http

<h3 class="text-center">Cadastro de Parceiro</h3>

<DenuncieAqui.Blazor.Components.Pages.CreateInstitution.Modal.PartnerRegistrationModal IsVisible="@ShowModal" OnClose="@CloseModal" />

<div class="full-page-background"></div>
<div class="card mb-3">
    <div class="row g-0">
        <div class="col-md-4">
            <img src="/Images/parceiro.png" class="img-fluid rounded-start" alt="Profile Picture">
        </div>
        <div class="col-md-8">
            <div class="card-body">
                <EditForm Model="@Model" OnValidSubmit="@CreateInstitution">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger">@ErrorMessage</div>
                    }

                    <div class="form-group">
                        <label for="CorporateName">Nome da Instituição</label>
                        <InputText id="CorporateName" class="form-control" @bind-Value="Model.CorporateName" />
                    </div>

                    <div class="form-group">
                        <label for="Document">Documento</label>
                        <InputText id="Document" class="form-control" @bind-Value="Model.Document" />
                    </div>

                    <div class="form-group">
                        <label for="Cep">Cep</label>
                        <InputText id="Cep" class="form-control" @bind-Value="Model.Cep" @onblur="HandleCepChange" />
                    </div>

                    <div class="form-group">
                        <label for="City">Cidade</label>
                        <InputText id="City" class="form-control" @bind-Value="Model.City" />
                    </div>

                    <div class="form-group">
                        <label for="Street">Rua</label>
                        <InputText id="Street" class="form-control" @bind-Value="Model.Street" />
                    </div>

                    <div class="form-group">
                        <label for="Neighborhood">Bairro</label>
                        <InputText id="Neighborhood" class="form-control" @bind-Value="Model.Neighborhood" />
                    </div>

                    <div class="form-group">
                        <label for="Uf">Estado</label>
                        <InputText id="Uf" class="form-control" @bind-Value="Model.Uf" />
                    </div>

                    <div class="form-group">
                        <label for="Complement">Complemento</label>
                        <InputText id="Complement" class="form-control" @bind-Value="Model.Complement" />
                    </div>

                    <div class="form-group">
                        <label for="NumHome">Número</label>
                        <InputNumber id="NumHome" class="form-control" @bind-Value="Model.NumHome" />
                    </div>

                    <button type="submit" class="btn btn-primary">Cadastrar</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private Institution Model { get; set; } = new Institution();
    private string ErrorMessage { get; set; } = string.Empty;
    private bool ShowModal { get; set; } = true;

    private async Task CreateInstitution()
    {
        try
        {
            await _institutionUseCase.CreateInstitutionAsync(Model,
                Model.CorporateName,
                Model.Document,
                Model.Cep,
                Model.City,
                Model.Street,
                Model.NumHome,
                Model.Complement!,
                Model.Neighborhood,
                Model.Uf
            );
            Model = new Institution();
            ErrorMessage = string.Empty;
            Navi.NavigateTo("/");
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
        }
        catch (Exception)
        {
            ErrorMessage = "Ocorreu um erro ao tentar cadastrar a instituição. Tente novamente.";
        }
    }

    private async Task HandleCepChange()
    {
        var cep = Model.Cep?.Replace("-", "").Replace(".", "").Trim();

        if (!string.IsNullOrEmpty(cep))
        {
            try
            {
                var addressInfo = await Http.GetFromJsonAsync<AddressResponse>($"https://viacep.com.br/ws/{cep}/json/");

                if (addressInfo != null && string.IsNullOrEmpty(addressInfo.erro))
                {
                    Model.Street = addressInfo.logradouro;
                    Model.Neighborhood = addressInfo.bairro;
                    Model.Uf = addressInfo.uf;
                    Model.City = addressInfo.localidade;
                }
                else
                {
                    ErrorMessage = "CEP inválido. Verifique e tente novamente.";
                }
            }
            catch (Exception)
            {
                ErrorMessage = "Erro ao buscar o CEP.";
            }
        }
        else
        {
            ErrorMessage = "Por favor, insira um CEP válido.";
        }
    }

    private void CloseModal()
    {
        ShowModal = false;
    }

    private class AddressResponse
    {
        public string logradouro { get; set; } = "";
        public string bairro { get; set; } = "";
        public string uf { get; set; } = "";
        public string localidade { get; set; } = "";
        public string erro { get; set; } = "";
    }
}
